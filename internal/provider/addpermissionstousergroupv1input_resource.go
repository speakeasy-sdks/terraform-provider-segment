// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/listplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	tfTypes "github.com/scentregroup/terraform-provider-segment/internal/provider/types"
	"github.com/scentregroup/terraform-provider-segment/internal/sdk"
	"github.com/scentregroup/terraform-provider-segment/internal/sdk/models/operations"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &AddPermissionsToUserGroupV1InputResource{}
var _ resource.ResourceWithImportState = &AddPermissionsToUserGroupV1InputResource{}

func NewAddPermissionsToUserGroupV1InputResource() resource.Resource {
	return &AddPermissionsToUserGroupV1InputResource{}
}

// AddPermissionsToUserGroupV1InputResource defines the resource implementation.
type AddPermissionsToUserGroupV1InputResource struct {
	client *sdk.Segment
}

// AddPermissionsToUserGroupV1InputResourceModel describes the resource data model.
type AddPermissionsToUserGroupV1InputResourceModel struct {
	Data        *tfTypes.AddPermissionsToUserGroupV1Output `tfsdk:"data"`
	Permissions []tfTypes.PermissionInputV1                `tfsdk:"permissions"`
	UserGroupID types.String                               `tfsdk:"user_group_id"`
}

func (r *AddPermissionsToUserGroupV1InputResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_add_permissions_to_user_group_v1_input"
}

func (r *AddPermissionsToUserGroupV1InputResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "AddPermissionsToUserGroupV1Input Resource",

		Attributes: map[string]schema.Attribute{
			"data": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"permissions": schema.ListNestedAttribute{
						Computed: true,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"resources": schema.ListNestedAttribute{
									Computed: true,
									NestedObject: schema.NestedAttributeObject{
										Attributes: map[string]schema.Attribute{
											"id": schema.StringAttribute{
												Computed:    true,
												Description: `The id of this resource.`,
											},
											"labels": schema.ListNestedAttribute{
												Computed: true,
												NestedObject: schema.NestedAttributeObject{
													Attributes: map[string]schema.Attribute{
														"description": schema.StringAttribute{
															Computed:    true,
															Description: `A description of what this label represents.`,
														},
														"key": schema.StringAttribute{
															Computed:    true,
															Description: `The key identifier for this label.`,
														},
														"value": schema.StringAttribute{
															Computed:    true,
															Description: `The value of this label.`,
														},
													},
												},
												Description: `The labels that further refine access to this resource. Labels are exclusive to Workspace-level permissions.`,
											},
											"type": schema.StringAttribute{
												Computed:    true,
												Description: `The type for this resource. must be one of ["FUNCTION", "SOURCE", "SPACE", "WAREHOUSE", "WORKSPACE"]`,
												Validators: []validator.String{
													stringvalidator.OneOf(
														"FUNCTION",
														"SOURCE",
														"SPACE",
														"WAREHOUSE",
														"WORKSPACE",
													),
												},
											},
										},
									},
									Description: `The resources included with this permission.`,
								},
								"role_id": schema.StringAttribute{
									Computed:    true,
									Description: `The id of the role that applies to this permission.`,
								},
								"role_name": schema.StringAttribute{
									Computed:    true,
									Description: `The name of the role that applies to this permission.`,
								},
							},
						},
						Description: `The updated set of permissions assigned to the user group.`,
					},
				},
				Description: `Returns the group's permissions, including the added permissions.`,
			},
			"permissions": schema.ListNestedAttribute{
				PlanModifiers: []planmodifier.List{
					listplanmodifier.RequiresReplaceIfConfigured(),
				},
				Required: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"resources": schema.ListNestedAttribute{
							PlanModifiers: []planmodifier.List{
								listplanmodifier.RequiresReplaceIfConfigured(),
							},
							Required: true,
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"id": schema.StringAttribute{
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
										},
										Required:    true,
										Description: `The id of this resource. Requires replacement if changed. `,
									},
									"labels": schema.ListNestedAttribute{
										PlanModifiers: []planmodifier.List{
											listplanmodifier.RequiresReplaceIfConfigured(),
										},
										Optional: true,
										NestedObject: schema.NestedAttributeObject{
											Attributes: map[string]schema.Attribute{
												"description": schema.StringAttribute{
													PlanModifiers: []planmodifier.String{
														stringplanmodifier.RequiresReplaceIfConfigured(),
													},
													Optional:    true,
													Description: `A description of what this label represents. Requires replacement if changed. `,
												},
												"key": schema.StringAttribute{
													PlanModifiers: []planmodifier.String{
														stringplanmodifier.RequiresReplaceIfConfigured(),
													},
													Required:    true,
													Description: `The key identifier for this label. Requires replacement if changed. `,
												},
												"value": schema.StringAttribute{
													PlanModifiers: []planmodifier.String{
														stringplanmodifier.RequiresReplaceIfConfigured(),
													},
													Required:    true,
													Description: `The value of this label. Requires replacement if changed. `,
												},
											},
										},
										Description: `The labels that further refine access to this resource. Labels are exclusive to Workspace-level permissions. Requires replacement if changed. `,
									},
									"type": schema.StringAttribute{
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
										},
										Required:    true,
										Description: `The type for this resource. Requires replacement if changed. ; must be one of ["FUNCTION", "SOURCE", "SPACE", "WAREHOUSE", "WORKSPACE"]`,
										Validators: []validator.String{
											stringvalidator.OneOf(
												"FUNCTION",
												"SOURCE",
												"SPACE",
												"WAREHOUSE",
												"WORKSPACE",
											),
										},
									},
								},
							},
							Description: `The resources to link the selected role to. Requires replacement if changed. `,
						},
						"role_id": schema.StringAttribute{
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplaceIfConfigured(),
							},
							Required:    true,
							Description: `The role id of this permission. Requires replacement if changed. `,
						},
					},
				},
				Description: `The permissions to add. Requires replacement if changed. `,
			},
			"user_group_id": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
				},
				Required:    true,
				Description: `Requires replacement if changed. `,
			},
		},
	}
}

func (r *AddPermissionsToUserGroupV1InputResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.Segment)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *sdk.Segment, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *AddPermissionsToUserGroupV1InputResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *AddPermissionsToUserGroupV1InputResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(plan.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	addPermissionsToUserGroupV1Input := *data.ToSharedAddPermissionsToUserGroupV1Input()
	userGroupID := data.UserGroupID.ValueString()
	request := operations.AddPermissionsToUserGroupRequest{
		AddPermissionsToUserGroupV1Input: addPermissionsToUserGroupV1Input,
		UserGroupID:                      userGroupID,
	}
	res, err := r.client.IAMGroups.AddPermissionsToUserGroup(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if res.TwoHundredApplicationJSONObject == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromOperationsAddPermissionsToUserGroupResponseBody(res.TwoHundredApplicationJSONObject)
	refreshPlan(ctx, plan, &data, resp.Diagnostics)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *AddPermissionsToUserGroupV1InputResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *AddPermissionsToUserGroupV1InputResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Not Implemented; we rely entirely on CREATE API request response

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *AddPermissionsToUserGroupV1InputResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *AddPermissionsToUserGroupV1InputResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	merge(ctx, req, resp, &data)
	if resp.Diagnostics.HasError() {
		return
	}

	// Not Implemented; all attributes marked as RequiresReplace

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *AddPermissionsToUserGroupV1InputResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *AddPermissionsToUserGroupV1InputResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Not Implemented; entity does not have a configured DELETE operation
}

func (r *AddPermissionsToUserGroupV1InputResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resp.Diagnostics.AddError("Not Implemented", "No available import state operation is available for resource add_permissions_to_user_group_v1_input.")
}
