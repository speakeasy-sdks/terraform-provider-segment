// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"encoding/json"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"math/big"
	"segment/internal/sdk/pkg/models/shared"
)

func (r *CreateTransformationV1InputResourceModel) ToCreateSDKType() *shared.CreateTransformationV1Input {
	destinationMetadataID := new(string)
	if !r.DestinationMetadataID.IsUnknown() && !r.DestinationMetadataID.IsNull() {
		*destinationMetadataID = r.DestinationMetadataID.ValueString()
	} else {
		destinationMetadataID = nil
	}
	enabled := r.Enabled.ValueBool()
	var fqlDefinedProperties []shared.FQLDefinedPropertyV1 = nil
	for _, fqlDefinedPropertiesItem := range r.FqlDefinedProperties {
		fql := fqlDefinedPropertiesItem.Fql.ValueString()
		propertyName := fqlDefinedPropertiesItem.PropertyName.ValueString()
		fqlDefinedProperties = append(fqlDefinedProperties, shared.FQLDefinedPropertyV1{
			Fql:          fql,
			PropertyName: propertyName,
		})
	}
	ifVar := r.If.ValueString()
	name := r.Name.ValueString()
	newEventName := new(string)
	if !r.NewEventName.IsUnknown() && !r.NewEventName.IsNull() {
		*newEventName = r.NewEventName.ValueString()
	} else {
		newEventName = nil
	}
	var propertyRenames []shared.PropertyRenameV1 = nil
	for _, propertyRenamesItem := range r.PropertyRenames {
		newName := propertyRenamesItem.NewName.ValueString()
		oldName := propertyRenamesItem.OldName.ValueString()
		propertyRenames = append(propertyRenames, shared.PropertyRenameV1{
			NewName: newName,
			OldName: oldName,
		})
	}
	var propertyValueTransformations []shared.PropertyValueTransformationV1 = nil
	for _, propertyValueTransformationsItem := range r.PropertyValueTransformations {
		var propertyPaths []string = nil
		for _, propertyPathsItem := range propertyValueTransformationsItem.PropertyPaths {
			propertyPaths = append(propertyPaths, propertyPathsItem.ValueString())
		}
		propertyValue := propertyValueTransformationsItem.PropertyValue.ValueString()
		propertyValueTransformations = append(propertyValueTransformations, shared.PropertyValueTransformationV1{
			PropertyPaths: propertyPaths,
			PropertyValue: propertyValue,
		})
	}
	sourceID := r.SourceID.ValueString()
	out := shared.CreateTransformationV1Input{
		DestinationMetadataID:        destinationMetadataID,
		Enabled:                      enabled,
		FqlDefinedProperties:         fqlDefinedProperties,
		If:                           ifVar,
		Name:                         name,
		NewEventName:                 newEventName,
		PropertyRenames:              propertyRenames,
		PropertyValueTransformations: propertyValueTransformations,
		SourceID:                     sourceID,
	}
	return &out
}

func (r *CreateTransformationV1InputResourceModel) RefreshFromCreateResponse(resp *shared.RequestErrorEnvelope) {
	r.Errors = nil
	for _, errorsItem := range resp.Errors {
		var errors1 RequestError
		if errorsItem.Data == nil {
			errors1.Data = types.StringNull()
		} else {
			dataResult, _ := json.Marshal(errorsItem.Data)
			errors1.Data = types.StringValue(string(dataResult))
		}
		if errorsItem.Field != nil {
			errors1.Field = types.StringValue(*errorsItem.Field)
		} else {
			errors1.Field = types.StringNull()
		}
		if errorsItem.Message != nil {
			errors1.Message = types.StringValue(*errorsItem.Message)
		} else {
			errors1.Message = types.StringNull()
		}
		if errorsItem.Status != nil {
			errors1.Status = types.NumberValue(big.NewFloat(float64(*errorsItem.Status)))
		} else {
			errors1.Status = types.NumberNull()
		}
		errors1.Type = types.StringValue(errorsItem.Type)
		r.Errors = append(r.Errors, errors1)
	}
}
