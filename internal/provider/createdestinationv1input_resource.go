// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"segment/internal/sdk"

	"github.com/hashicorp/terraform-plugin-framework-validators/mapvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/boolplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/mapplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"segment/internal/validators"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &CreateDestinationV1InputResource{}
var _ resource.ResourceWithImportState = &CreateDestinationV1InputResource{}

func NewCreateDestinationV1InputResource() resource.Resource {
	return &CreateDestinationV1InputResource{}
}

// CreateDestinationV1InputResource defines the resource implementation.
type CreateDestinationV1InputResource struct {
	client *sdk.Segment
}

// CreateDestinationV1InputResourceModel describes the resource data model.
type CreateDestinationV1InputResourceModel struct {
	Data       *CreateDestinationV1Output `tfsdk:"data"`
	Enabled    types.Bool                 `tfsdk:"enabled"`
	MetadataID types.String               `tfsdk:"metadata_id"`
	Name       types.String               `tfsdk:"name"`
	Settings   map[string]types.String    `tfsdk:"settings"`
	SourceID   types.String               `tfsdk:"source_id"`
}

func (r *CreateDestinationV1InputResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_create_destination_v1_input"
}

func (r *CreateDestinationV1InputResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "CreateDestinationV1Input Resource",

		Attributes: map[string]schema.Attribute{
			"data": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"destination": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"enabled": schema.BoolAttribute{
								Computed:    true,
								Description: `Whether this instance of a Destination receives data.`,
							},
							"id": schema.StringAttribute{
								Computed: true,
								MarkdownDescription: `The unique identifier of this instance of a Destination.` + "\n" +
									`` + "\n" +
									`Config API note: analogous to ` + "`" + `name` + "`" + `.`,
							},
							"metadata": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"actions": schema.ListNestedAttribute{
										Computed: true,
										NestedObject: schema.NestedAttributeObject{
											Attributes: map[string]schema.Attribute{
												"default_trigger": schema.StringAttribute{
													Computed:    true,
													Description: `The default value used as the trigger when connecting this action.`,
												},
												"description": schema.StringAttribute{
													Computed:    true,
													Description: `A human-readable description of the action. May include Markdown.`,
												},
												"fields": schema.ListNestedAttribute{
													Computed: true,
													NestedObject: schema.NestedAttributeObject{
														Attributes: map[string]schema.Attribute{
															"allow_null": schema.BoolAttribute{
																Computed:    true,
																Description: `Whether this field allows null values.`,
															},
															"choices": schema.StringAttribute{
																Computed: true,
																Validators: []validator.String{
																	validators.IsValidJSON(),
																},
																MarkdownDescription: `Parsed as JSON.` + "\n" +
																	`A list of machine-readable value/label pairs to populate a static dropdown.`,
															},
															"default_value": schema.StringAttribute{
																Computed: true,
																Validators: []validator.String{
																	validators.IsValidJSON(),
																},
																MarkdownDescription: `Parsed as JSON.` + "\n" +
																	`A default value that is saved the first time an action is created.`,
															},
															"description": schema.StringAttribute{
																Computed:    true,
																Description: `A human-readable description of this value. You can use Markdown.`,
															},
															"dynamic": schema.BoolAttribute{
																Computed:    true,
																Description: `Whether this field should execute a dynamic request to fetch choices to populate a dropdown. When true, ` + "`" + `choices` + "`" + ` is ignored.`,
															},
															"field_key": schema.StringAttribute{
																Computed:    true,
																Description: `A unique machine-readable key for the field. Should ideally match the expected key in the action\'s API request.`,
															},
															"id": schema.StringAttribute{
																Computed:    true,
																Description: `The primary key of the field.`,
															},
															"label": schema.StringAttribute{
																Computed:    true,
																Description: `A human-readable label for this value.`,
															},
															"multiple": schema.BoolAttribute{
																Computed:    true,
																Description: `Whether a user can provide multiples of this field.`,
															},
															"placeholder": schema.StringAttribute{
																Computed:    true,
																Description: `An example value displayed but not saved.`,
															},
															"required": schema.BoolAttribute{
																Computed:    true,
																Description: `Whether this field is required.`,
															},
															"sort_order": schema.NumberAttribute{
																Computed:    true,
																Description: `The order this particular field is (used in the UI for displaying the fields in a specified order).`,
															},
															"type": schema.StringAttribute{
																Computed: true,
																Validators: []validator.String{
																	stringvalidator.OneOf(
																		"BOOLEAN",
																		"DATETIME",
																		"HIDDEN",
																		"INTEGER",
																		"NUMBER",
																		"OBJECT",
																		"PASSWORD",
																		"STRING",
																		"TEXT",
																	),
																},
																MarkdownDescription: `must be one of ["BOOLEAN", "DATETIME", "HIDDEN", "INTEGER", "NUMBER", "OBJECT", "PASSWORD", "STRING", "TEXT"]` + "\n" +
																	`The data type for this value.`,
															},
														},
													},
													Description: `The fields expected in order to perform the action.`,
												},
												"hidden": schema.BoolAttribute{
													Computed:    true,
													Description: `Whether the action should be hidden.`,
												},
												"id": schema.StringAttribute{
													Computed:    true,
													Description: `The primary key of the action.`,
												},
												"name": schema.StringAttribute{
													Computed:    true,
													Description: `A human-readable name for the action.`,
												},
												"platform": schema.StringAttribute{
													Computed: true,
													Validators: []validator.String{
														stringvalidator.OneOf(
															"CLOUD",
															"MOBILE",
															"WEB",
														),
													},
													MarkdownDescription: `must be one of ["CLOUD", "MOBILE", "WEB"]` + "\n" +
														`The platform on which this action runs.`,
												},
												"slug": schema.StringAttribute{
													Computed:    true,
													Description: `A machine-readable key unique to the action definition.`,
												},
											},
										},
										Description: `Actions available for the Destination.`,
									},
									"categories": schema.ListAttribute{
										Computed:    true,
										ElementType: types.StringType,
										Description: `A list of categories with which the Destination is associated.`,
									},
									"components": schema.ListNestedAttribute{
										Computed: true,
										NestedObject: schema.NestedAttributeObject{
											Attributes: map[string]schema.Attribute{
												"code": schema.StringAttribute{
													Computed:    true,
													Description: `Link to the repository hosting the code for this component.`,
												},
												"owner": schema.StringAttribute{
													Computed: true,
													Validators: []validator.String{
														stringvalidator.OneOf(
															"PARTNER",
															"SEGMENT",
														),
													},
													MarkdownDescription: `must be one of ["PARTNER", "SEGMENT"]` + "\n" +
														`The owner of this component. Either 'SEGMENT' or 'PARTNER'.`,
												},
												"type": schema.StringAttribute{
													Computed: true,
													Validators: []validator.String{
														stringvalidator.OneOf(
															"ANDROID",
															"BROWSER",
															"IOS",
															"SERVER",
														),
													},
													MarkdownDescription: `must be one of ["ANDROID", "BROWSER", "IOS", "SERVER"]` + "\n" +
														`The component type.`,
												},
											},
										},
										Description: `A list of components this Destination provides.`,
									},
									"contacts": schema.ListNestedAttribute{
										Computed: true,
										NestedObject: schema.NestedAttributeObject{
											Attributes: map[string]schema.Attribute{
												"email": schema.StringAttribute{
													Computed:    true,
													Description: `Email of this contact.`,
												},
												"is_primary": schema.BoolAttribute{
													Computed:    true,
													Description: `Whether this is a primary contact.`,
												},
												"name": schema.StringAttribute{
													Computed:    true,
													Description: `Name of this contact.`,
												},
												"role": schema.StringAttribute{
													Computed:    true,
													Description: `Role of this contact.`,
												},
											},
										},
										Description: `Contact info for Integration Owners.`,
									},
									"description": schema.StringAttribute{
										Computed:    true,
										Description: `The description of the Destination.`,
									},
									"id": schema.StringAttribute{
										Computed: true,
										MarkdownDescription: `The id of the Destination metadata.` + "\n" +
											`` + "\n" +
											`Config API note: analogous to ` + "`" + `name` + "`" + `.`,
									},
									"logos": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"alt": schema.StringAttribute{
												Computed:    true,
												Description: `The alternative text for this logo.`,
											},
											"default": schema.StringAttribute{
												Computed:    true,
												Description: `The default URL for this logo.`,
											},
											"mark": schema.StringAttribute{
												Computed:    true,
												Description: `The logo mark.`,
											},
										},
										Description: `Represents a logo.`,
									},
									"name": schema.StringAttribute{
										Computed: true,
										MarkdownDescription: `The user-friendly name of the Destination.` + "\n" +
											`` + "\n" +
											`Config API note: equal to ` + "`" + `displayName` + "`" + `.`,
									},
									"options": schema.ListNestedAttribute{
										Computed: true,
										NestedObject: schema.NestedAttributeObject{
											Attributes: map[string]schema.Attribute{
												"default_value": schema.StringAttribute{
													Computed: true,
													Validators: []validator.String{
														validators.IsValidJSON(),
													},
													MarkdownDescription: `Parsed as JSON.` + "\n" +
														`An optional default value for the field.`,
												},
												"description": schema.StringAttribute{
													Computed:    true,
													Description: `An optional short text description of the field.`,
												},
												"label": schema.StringAttribute{
													Computed:    true,
													Description: `An optional label for this field.`,
												},
												"name": schema.StringAttribute{
													Computed:    true,
													Description: `The name identifying this option in the context of a Segment Integration.`,
												},
												"required": schema.BoolAttribute{
													Computed:    true,
													Description: `Whether this is a required option when setting up the Integration.`,
												},
												"type": schema.StringAttribute{
													Computed: true,
													MarkdownDescription: `Defines the type for this option in the schema. Types are most commonly strings, but may also represent other` + "\n" +
														`primitive types, such as booleans, and numbers, as well as complex types, such as objects and arrays.`,
												},
											},
										},
										Description: `Options configured for the Destination.`,
									},
									"partner_owned": schema.BoolAttribute{
										Computed:    true,
										Description: `Partner Owned flag.`,
									},
									"presets": schema.ListNestedAttribute{
										Computed: true,
										NestedObject: schema.NestedAttributeObject{
											Attributes: map[string]schema.Attribute{
												"action_id": schema.StringAttribute{
													Computed:    true,
													Description: `The unique identifier for the Destination Action to trigger.`,
												},
												"fields": schema.MapAttribute{
													Computed:    true,
													ElementType: types.StringType,
													Validators: []validator.Map{
														mapvalidator.ValueStringsAre(validators.IsValidJSON()),
													},
													Description: `The default settings for action fields.`,
												},
												"name": schema.StringAttribute{
													Computed:    true,
													Description: `The name of the subscription.`,
												},
												"trigger": schema.StringAttribute{
													Computed:    true,
													Description: `FQL string that describes what events should trigger an action. See https://segment.com/docs/config-api/fql/ for more information regarding Segment's Filter Query Language (FQL).`,
												},
											},
										},
										Description: `Predefined Destination subscriptions that can optionally be applied when connecting a new instance of the Destination.`,
									},
									"previous_names": schema.ListAttribute{
										Computed:    true,
										ElementType: types.StringType,
										Description: `A list of names previously used by the Destination.`,
									},
									"region_endpoints": schema.ListAttribute{
										Computed:    true,
										ElementType: types.StringType,
										Description: `The list of regional endpoints for this Destination.`,
									},
									"slug": schema.StringAttribute{
										Computed:    true,
										Description: `The slug used to identify the Destination in the Segment app.`,
									},
									"status": schema.StringAttribute{
										Computed: true,
										Validators: []validator.String{
											stringvalidator.OneOf(
												"DEPRECATED",
												"PRIVATE_BETA",
												"PRIVATE_BUILDING",
												"PRIVATE_SUBMITTED",
												"PUBLIC",
												"PUBLIC_BETA",
												"UNAVAILABLE",
											),
										},
										MarkdownDescription: `must be one of ["DEPRECATED", "PRIVATE_BETA", "PRIVATE_BUILDING", "PRIVATE_SUBMITTED", "PUBLIC", "PUBLIC_BETA", "UNAVAILABLE"]` + "\n" +
											`Support status of the Destination.`,
									},
									"supported_features": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"browser_unbundling": schema.BoolAttribute{
												Computed:    true,
												Description: `Whether this Destination supports browser unbundling.`,
											},
											"browser_unbundling_public": schema.BoolAttribute{
												Computed:    true,
												Description: `Whether this Destination supports public browser unbundling.`,
											},
											"cloud_mode_instances": schema.StringAttribute{
												Computed: true,
												Validators: []validator.String{
													stringvalidator.OneOf(
														"0",
														"1",
														"MULTIPLE",
														"NONE",
														"SINGLE",
													),
												},
												MarkdownDescription: `must be one of ["0", "1", "MULTIPLE", "NONE", "SINGLE"]` + "\n" +
													`This Destination's support level for cloud mode instances.` + "\n" +
													`The values '0' and 'NONE', and '1' and 'SINGLE' are equivalent.`,
											},
											"device_mode_instances": schema.StringAttribute{
												Computed: true,
												Validators: []validator.String{
													stringvalidator.OneOf(
														"0",
														"1",
														"NONE",
														"SINGLE",
													),
												},
												MarkdownDescription: `must be one of ["0", "1", "NONE", "SINGLE"]` + "\n" +
													`This Destination's support level for device mode instances.` + "\n" +
													`Support for multiple device mode instances is currently not planned.` + "\n" +
													`The values '0' and 'NONE', and '1' and 'SINGLE' are equivalent.`,
											},
											"replay": schema.BoolAttribute{
												Computed:    true,
												Description: `Whether this Destination supports replays.`,
											},
										},
										Description: `Represents features that a given Destination supports.`,
									},
									"supported_methods": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"alias": schema.BoolAttribute{
												Computed:    true,
												Description: `Identifies if the Destination supports the ` + "`" + `alias` + "`" + ` method.`,
											},
											"group": schema.BoolAttribute{
												Computed:    true,
												Description: `Identifies if the Destination supports the ` + "`" + `group` + "`" + ` method.`,
											},
											"identify": schema.BoolAttribute{
												Computed:    true,
												Description: `Identifies if the Destination supports the ` + "`" + `identify` + "`" + ` method.`,
											},
											"pageview": schema.BoolAttribute{
												Computed:    true,
												Description: `Identifies if the Destination supports the ` + "`" + `pageview` + "`" + ` method.`,
											},
											"track": schema.BoolAttribute{
												Computed:    true,
												Description: `Identifies if the Destination supports the ` + "`" + `track` + "`" + ` method.`,
											},
										},
										Description: `Represents methods that a given Destination supports.`,
									},
									"supported_platforms": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"browser": schema.BoolAttribute{
												Computed:    true,
												Description: `Whether this Destination supports browser events.`,
											},
											"mobile": schema.BoolAttribute{
												Computed:    true,
												Description: `Whether this Destination supports mobile events.`,
											},
											"server": schema.BoolAttribute{
												Computed:    true,
												Description: `Whether this Destination supports server events.`,
											},
										},
										Description: `Represents platforms that a given Destination supports.`,
									},
									"supported_regions": schema.ListAttribute{
										Computed:    true,
										ElementType: types.StringType,
										Description: `A list of supported regions for this Destination.`,
									},
									"website": schema.StringAttribute{
										Computed:    true,
										Description: `A website URL for this Destination.`,
									},
								},
								MarkdownDescription: `Represents a Destination within Segment.` + "\n" +
									`` + "\n" +
									`A Destination is a target for Segment to forward data to, and represents a tool or storage Destination.`,
							},
							"name": schema.StringAttribute{
								Computed: true,
								MarkdownDescription: `The name of this instance of a Destination.` + "\n" +
									`` + "\n" +
									`Config API note: equal to ` + "`" + `displayName` + "`" + `.`,
							},
							"settings": schema.MapAttribute{
								Computed:    true,
								ElementType: types.StringType,
								Validators: []validator.Map{
									mapvalidator.ValueStringsAre(validators.IsValidJSON()),
								},
								MarkdownDescription: `The collection of settings associated with a Destination.` + "\n" +
									`` + "\n" +
									`Config API note: equal to ` + "`" + `config` + "`" + `.`,
							},
							"source_id": schema.StringAttribute{
								Computed: true,
								MarkdownDescription: `The id of a Source connected to this instance of a Destination.` + "\n" +
									`` + "\n" +
									`Config API note: analogous to ` + "`" + `parent` + "`" + `.`,
							},
						},
						MarkdownDescription: `Business tools or apps that you can connect to the data flowing through Segment.` + "\n" +
							`` + "\n" +
							`This is equal to the Destination object in Config API, with the following fields omitted:` + "\n" +
							`- catalogId` + "\n" +
							`- createTime` + "\n" +
							`- updateTime` + "\n" +
							`- connectionMode.`,
					},
				},
				Description: `Creates a new Destination.`,
			},
			"enabled": schema.BoolAttribute{
				PlanModifiers: []planmodifier.Bool{
					boolplanmodifier.RequiresReplace(),
				},
				Optional:    true,
				Description: `Whether this Destination should receive data.`,
			},
			"metadata_id": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Required:    true,
				Description: `The id of the metadata to link to the new Destination.`,
			},
			"name": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Optional: true,
				MarkdownDescription: `Defines the display name of the Destination.` + "\n" +
					`` + "\n" +
					`Config API note: equal to ` + "`" + `displayName` + "`" + `.`,
			},
			"settings": schema.MapAttribute{
				PlanModifiers: []planmodifier.Map{
					mapplanmodifier.RequiresReplace(),
				},
				Required:    true,
				ElementType: types.StringType,
				Validators: []validator.Map{
					mapvalidator.ValueStringsAre(validators.IsValidJSON()),
				},
				MarkdownDescription: `An object that contains settings for the Destination based on the "required" and "advanced" settings present in the` + "\n" +
					`Destination metadata.` + "\n" +
					`` + "\n" +
					`Config API note: equal to ` + "`" + `config` + "`" + `.`,
			},
			"source_id": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Required: true,
				MarkdownDescription: `The id of the Source to connect to this Destination instance.` + "\n" +
					`` + "\n" +
					`Config API note: analogous to ` + "`" + `parent` + "`" + `.`,
			},
		},
	}
}

func (r *CreateDestinationV1InputResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.Segment)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *sdk.Segment, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *CreateDestinationV1InputResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *CreateDestinationV1InputResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request := *data.ToCreateSDKType()
	res, err := r.client.Destinations.CreateDestination(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if res.TwoHundredApplicationJSONObject == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromCreateResponse(res.TwoHundredApplicationJSONObject)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *CreateDestinationV1InputResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *CreateDestinationV1InputResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Not Implemented; we rely entirely on CREATE API request response

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *CreateDestinationV1InputResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *CreateDestinationV1InputResourceModel
	merge(ctx, req, resp, &data)
	if resp.Diagnostics.HasError() {
		return
	}

	// Not Implemented; all attributes marked as RequiresReplace

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *CreateDestinationV1InputResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *CreateDestinationV1InputResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Not Implemented; entity does not have a configured DELETE operation
}

func (r *CreateDestinationV1InputResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resp.Diagnostics.AddError("Not Implemented", "No available import state operation is available for resource create_destination_v1_input.")
}
