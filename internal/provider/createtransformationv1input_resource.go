// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/boolplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/listplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	tfTypes "github.com/scentregroup/terraform-provider-segment/internal/provider/types"
	"github.com/scentregroup/terraform-provider-segment/internal/sdk"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &CreateTransformationV1InputResource{}
var _ resource.ResourceWithImportState = &CreateTransformationV1InputResource{}

func NewCreateTransformationV1InputResource() resource.Resource {
	return &CreateTransformationV1InputResource{}
}

// CreateTransformationV1InputResource defines the resource implementation.
type CreateTransformationV1InputResource struct {
	client *sdk.Segment
}

// CreateTransformationV1InputResourceModel describes the resource data model.
type CreateTransformationV1InputResourceModel struct {
	Data                         *tfTypes.CreateTransformationV1Output   `tfsdk:"data"`
	DestinationMetadataID        types.String                            `tfsdk:"destination_metadata_id"`
	Enabled                      types.Bool                              `tfsdk:"enabled"`
	FqlDefinedProperties         []tfTypes.FQLDefinedPropertyV1          `tfsdk:"fql_defined_properties"`
	If                           types.String                            `tfsdk:"if"`
	Name                         types.String                            `tfsdk:"name"`
	NewEventName                 types.String                            `tfsdk:"new_event_name"`
	PropertyRenames              []tfTypes.PropertyRenameV1              `tfsdk:"property_renames"`
	PropertyValueTransformations []tfTypes.PropertyValueTransformationV1 `tfsdk:"property_value_transformations"`
	SourceID                     types.String                            `tfsdk:"source_id"`
}

func (r *CreateTransformationV1InputResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_create_transformation_v1_input"
}

func (r *CreateTransformationV1InputResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "CreateTransformationV1Input Resource",

		Attributes: map[string]schema.Attribute{
			"data": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"transformation": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"destination_metadata_id": schema.StringAttribute{
								Computed:    true,
								Description: `The optional Destination metadata associated with the Transformation.`,
							},
							"enabled": schema.BoolAttribute{
								Computed:    true,
								Description: `If the Transformation is enabled.`,
							},
							"fql_defined_properties": schema.ListNestedAttribute{
								Computed: true,
								NestedObject: schema.NestedAttributeObject{
									Attributes: map[string]schema.Attribute{
										"fql": schema.StringAttribute{
											Computed:    true,
											Description: `The FQL expression used to compute the property.`,
										},
										"property_name": schema.StringAttribute{
											Computed:    true,
											Description: `The new property name.`,
										},
									},
								},
								Description: `Optional array for defining new properties in FQL. Limited to 1 property right now.`,
							},
							"id": schema.StringAttribute{
								Computed:    true,
								Description: `The id of the Transformation.`,
							},
							"if": schema.StringAttribute{
								Computed: true,
								MarkdownDescription: `If statement ([FQL](https://segment.com/docs/config-api/fql/)) to match events.` + "\n" +
									`` + "\n" +
									`For standard event matchers, use the following:` + "\n" +
									`  Track -\> "event='\<eventName\>'"` + "\n" +
									`  Identify -\> "type='identify'"` + "\n" +
									`  Group -\> "type='group'"`,
							},
							"name": schema.StringAttribute{
								Computed:    true,
								Description: `The name of the Transformation.`,
							},
							"new_event_name": schema.StringAttribute{
								Computed:    true,
								Description: `Optional new event name for renaming events. Works only for 'track' event type.`,
							},
							"property_renames": schema.ListNestedAttribute{
								Computed: true,
								NestedObject: schema.NestedAttributeObject{
									Attributes: map[string]schema.Attribute{
										"new_name": schema.StringAttribute{
											Computed:    true,
											Description: `The new name to rename the property.`,
										},
										"old_name": schema.StringAttribute{
											Computed:    true,
											Description: `The old name of the property.`,
										},
									},
								},
								Description: `Optional array for renaming properties collected by your events.`,
							},
							"property_value_transformations": schema.ListNestedAttribute{
								Computed: true,
								NestedObject: schema.NestedAttributeObject{
									Attributes: map[string]schema.Attribute{
										"property_paths": schema.ListAttribute{
											Computed:    true,
											ElementType: types.StringType,
											Description: `The property paths. The maximum number of paths is 10.`,
										},
										"property_value": schema.StringAttribute{
											Computed:    true,
											Description: `The new value of the property paths.`,
										},
									},
								},
								Description: `Optional array for transforming properties and values collected by your events. Limited to 10 properties.`,
							},
							"source_id": schema.StringAttribute{
								Computed:    true,
								Description: `The Source associated with the Transformation.`,
							},
						},
						Description: `The created Transformation.`,
					},
				},
				Description: `The output of a created Transformation.`,
			},
			"destination_metadata_id": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
				},
				Optional:    true,
				Description: `The optional Destination metadata id to be associated with the Transformation. Requires replacement if changed. `,
			},
			"enabled": schema.BoolAttribute{
				PlanModifiers: []planmodifier.Bool{
					boolplanmodifier.RequiresReplaceIfConfigured(),
				},
				Required:    true,
				Description: `If the Transformation should be enabled. Requires replacement if changed. `,
			},
			"fql_defined_properties": schema.ListNestedAttribute{
				PlanModifiers: []planmodifier.List{
					listplanmodifier.RequiresReplaceIfConfigured(),
				},
				Optional: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"fql": schema.StringAttribute{
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplaceIfConfigured(),
							},
							Required:    true,
							Description: `The FQL expression used to compute the property. Requires replacement if changed. `,
						},
						"property_name": schema.StringAttribute{
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplaceIfConfigured(),
							},
							Required:    true,
							Description: `The new property name. Requires replacement if changed. `,
						},
					},
				},
				Description: `Optional array for defining new properties in [FQL](https://segment.com/docs/config-api/fql/). Currently limited to 1 property. Requires replacement if changed. `,
			},
			"if": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
				},
				Required: true,
				MarkdownDescription: `If statement ([FQL](https://segment.com/docs/config-api/fql/)) to match events.` + "\n" +
					`` + "\n" +
					`For standard event matchers, use the following:` + "\n" +
					`  Track -\> "event='\<eventName\>'"` + "\n" +
					`  Identify -\> "type='identify'"` + "\n" +
					`  Group -\> "type='group'"` + "\n" +
					`Requires replacement if changed. `,
			},
			"name": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
				},
				Required:    true,
				Description: `The name of the Transformation. Requires replacement if changed. `,
			},
			"new_event_name": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
				},
				Optional:    true,
				Description: `Optional new event name for renaming events. Works only for 'track' event type. Requires replacement if changed. `,
			},
			"property_renames": schema.ListNestedAttribute{
				PlanModifiers: []planmodifier.List{
					listplanmodifier.RequiresReplaceIfConfigured(),
				},
				Optional: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"new_name": schema.StringAttribute{
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplaceIfConfigured(),
							},
							Required:    true,
							Description: `The new name to rename the property. Requires replacement if changed. `,
						},
						"old_name": schema.StringAttribute{
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplaceIfConfigured(),
							},
							Required:    true,
							Description: `The old name of the property. Requires replacement if changed. `,
						},
					},
				},
				Description: `Optional array for renaming properties collected by your events. Requires replacement if changed. `,
			},
			"property_value_transformations": schema.ListNestedAttribute{
				PlanModifiers: []planmodifier.List{
					listplanmodifier.RequiresReplaceIfConfigured(),
				},
				Optional: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"property_paths": schema.ListAttribute{
							PlanModifiers: []planmodifier.List{
								listplanmodifier.RequiresReplaceIfConfigured(),
							},
							Required:    true,
							ElementType: types.StringType,
							Description: `The property paths. The maximum number of paths is 10. Requires replacement if changed. `,
						},
						"property_value": schema.StringAttribute{
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplaceIfConfigured(),
							},
							Required:    true,
							Description: `The new value of the property paths. Requires replacement if changed. `,
						},
					},
				},
				Description: `Optional array for transforming properties and values collected by your events. Limited to 10 properties. Requires replacement if changed. `,
			},
			"source_id": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
				},
				Required:    true,
				Description: `The Source to be associated with the Transformation. Requires replacement if changed. `,
			},
		},
	}
}

func (r *CreateTransformationV1InputResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.Segment)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *sdk.Segment, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *CreateTransformationV1InputResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *CreateTransformationV1InputResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(plan.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request := *data.ToSharedCreateTransformationV1Input()
	res, err := r.client.Transformations.CreateTransformation(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if res.TwoHundredApplicationJSONObject == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromOperationsCreateTransformationResponseBody(res.TwoHundredApplicationJSONObject)
	refreshPlan(ctx, plan, &data, resp.Diagnostics)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *CreateTransformationV1InputResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *CreateTransformationV1InputResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Not Implemented; we rely entirely on CREATE API request response

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *CreateTransformationV1InputResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *CreateTransformationV1InputResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	merge(ctx, req, resp, &data)
	if resp.Diagnostics.HasError() {
		return
	}

	// Not Implemented; all attributes marked as RequiresReplace

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *CreateTransformationV1InputResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *CreateTransformationV1InputResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Not Implemented; entity does not have a configured DELETE operation
}

func (r *CreateTransformationV1InputResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resp.Diagnostics.AddError("Not Implemented", "No available import state operation is available for resource create_transformation_v1_input.")
}
