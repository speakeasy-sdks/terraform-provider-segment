// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"encoding/json"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"math/big"
	"segment/internal/sdk/pkg/models/shared"
)

func (r *CreateFilterForDestinationV1InputResourceModel) ToCreateSDKType() *shared.CreateFilterForDestinationV1Input {
	var actions []shared.DestinationFilterActionV1 = nil
	for _, actionsItem := range r.Actions {
		fields := make(map[string]interface{})
		for fieldsKey, fieldsValue := range actionsItem.Fields {
			var fieldsInst interface{}
			_ = json.Unmarshal([]byte(fieldsValue.ValueString()), &fieldsInst)
			fields[fieldsKey] = fieldsInst
		}
		path := new(string)
		if !actionsItem.Path.IsUnknown() && !actionsItem.Path.IsNull() {
			*path = actionsItem.Path.ValueString()
		} else {
			path = nil
		}
		percent := new(float64)
		if !actionsItem.Percent.IsUnknown() && !actionsItem.Percent.IsNull() {
			*percent, _ = actionsItem.Percent.ValueBigFloat().Float64()
		} else {
			percent = nil
		}
		typeVar := shared.DestinationFilterActionV1Type(actionsItem.Type.ValueString())
		actions = append(actions, shared.DestinationFilterActionV1{
			Fields:  fields,
			Path:    path,
			Percent: percent,
			Type:    typeVar,
		})
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	enabled := r.Enabled.ValueBool()
	ifVar := r.If.ValueString()
	sourceID := r.SourceID.ValueString()
	title := r.Title.ValueString()
	out := shared.CreateFilterForDestinationV1Input{
		Actions:     actions,
		Description: description,
		Enabled:     enabled,
		If:          ifVar,
		SourceID:    sourceID,
		Title:       title,
	}
	return &out
}

func (r *CreateFilterForDestinationV1InputResourceModel) RefreshFromCreateResponse(resp *shared.RequestErrorEnvelope) {
	r.Errors = nil
	for _, errorsItem := range resp.Errors {
		var errors1 RequestError
		if errorsItem.Data == nil {
			errors1.Data = types.StringNull()
		} else {
			dataResult, _ := json.Marshal(errorsItem.Data)
			errors1.Data = types.StringValue(string(dataResult))
		}
		if errorsItem.Field != nil {
			errors1.Field = types.StringValue(*errorsItem.Field)
		} else {
			errors1.Field = types.StringNull()
		}
		if errorsItem.Message != nil {
			errors1.Message = types.StringValue(*errorsItem.Message)
		} else {
			errors1.Message = types.StringNull()
		}
		if errorsItem.Status != nil {
			errors1.Status = types.NumberValue(big.NewFloat(float64(*errorsItem.Status)))
		} else {
			errors1.Status = types.NumberNull()
		}
		errors1.Type = types.StringValue(errorsItem.Type)
		r.Errors = append(r.Errors, errors1)
	}
}
