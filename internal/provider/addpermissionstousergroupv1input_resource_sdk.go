// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"encoding/json"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"math/big"
	"segment/internal/sdk/pkg/models/shared"
)

func (r *AddPermissionsToUserGroupV1InputResourceModel) ToCreateSDKType() *shared.AddPermissionsToUserGroupV1Input {
	var permissions []shared.PermissionInputV1 = nil
	for _, permissionsItem := range r.Permissions {
		var resources []shared.PermissionResourceV1 = nil
		for _, resourcesItem := range permissionsItem.Resources {
			id := resourcesItem.ID.ValueString()
			var labels []shared.AllowedLabelBeta = nil
			for _, labelsItem := range resourcesItem.Labels {
				description := new(string)
				if !labelsItem.Description.IsUnknown() && !labelsItem.Description.IsNull() {
					*description = labelsItem.Description.ValueString()
				} else {
					description = nil
				}
				key := labelsItem.Key.ValueString()
				value := labelsItem.Value.ValueString()
				labels = append(labels, shared.AllowedLabelBeta{
					Description: description,
					Key:         key,
					Value:       value,
				})
			}
			typeVar := shared.PermissionResourceV1Type(resourcesItem.Type.ValueString())
			resources = append(resources, shared.PermissionResourceV1{
				ID:     id,
				Labels: labels,
				Type:   typeVar,
			})
		}
		roleID := permissionsItem.RoleID.ValueString()
		permissions = append(permissions, shared.PermissionInputV1{
			Resources: resources,
			RoleID:    roleID,
		})
	}
	out := shared.AddPermissionsToUserGroupV1Input{
		Permissions: permissions,
	}
	return &out
}

func (r *AddPermissionsToUserGroupV1InputResourceModel) RefreshFromCreateResponse(resp *shared.RequestErrorEnvelope) {
	r.Errors = nil
	for _, errorsItem := range resp.Errors {
		var errors1 RequestError
		if errorsItem.Data == nil {
			errors1.Data = types.StringNull()
		} else {
			dataResult, _ := json.Marshal(errorsItem.Data)
			errors1.Data = types.StringValue(string(dataResult))
		}
		if errorsItem.Field != nil {
			errors1.Field = types.StringValue(*errorsItem.Field)
		} else {
			errors1.Field = types.StringNull()
		}
		if errorsItem.Message != nil {
			errors1.Message = types.StringValue(*errorsItem.Message)
		} else {
			errors1.Message = types.StringNull()
		}
		if errorsItem.Status != nil {
			errors1.Status = types.NumberValue(big.NewFloat(float64(*errorsItem.Status)))
		} else {
			errors1.Status = types.NumberNull()
		}
		errors1.Type = types.StringValue(errorsItem.Type)
		r.Errors = append(r.Errors, errors1)
	}
}
