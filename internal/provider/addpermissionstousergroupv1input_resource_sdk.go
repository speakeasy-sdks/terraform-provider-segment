// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/scentregroup/terraform-provider-segment/internal/sdk/pkg/models/operations"
	"github.com/scentregroup/terraform-provider-segment/internal/sdk/pkg/models/shared"
)

func (r *AddPermissionsToUserGroupV1InputResourceModel) ToCreateSDKType() *shared.AddPermissionsToUserGroupV1Input {
	var permissions []shared.PermissionInputV1 = nil
	for _, permissionsItem := range r.Permissions {
		var resources []shared.PermissionResourceV1 = nil
		for _, resourcesItem := range permissionsItem.Resources {
			id := resourcesItem.ID.ValueString()
			var labels []shared.AllowedLabelBeta = nil
			for _, labelsItem := range resourcesItem.Labels {
				description := new(string)
				if !labelsItem.Description.IsUnknown() && !labelsItem.Description.IsNull() {
					*description = labelsItem.Description.ValueString()
				} else {
					description = nil
				}
				key := labelsItem.Key.ValueString()
				value := labelsItem.Value.ValueString()
				labels = append(labels, shared.AllowedLabelBeta{
					Description: description,
					Key:         key,
					Value:       value,
				})
			}
			typeVar := shared.PermissionResourceV1Type(resourcesItem.Type.ValueString())
			resources = append(resources, shared.PermissionResourceV1{
				ID:     id,
				Labels: labels,
				Type:   typeVar,
			})
		}
		roleID := permissionsItem.RoleID.ValueString()
		permissions = append(permissions, shared.PermissionInputV1{
			Resources: resources,
			RoleID:    roleID,
		})
	}
	out := shared.AddPermissionsToUserGroupV1Input{
		Permissions: permissions,
	}
	return &out
}

func (r *AddPermissionsToUserGroupV1InputResourceModel) RefreshFromCreateResponse(resp *operations.AddPermissionsToUserGroupResponseBody) {
	if resp.Data == nil {
		r.Data = nil
	} else {
		r.Data = &AddPermissionsToUserGroupV1Output{}
		r.Data.Permissions = nil
		for _, permissionsItem := range resp.Data.Permissions {
			var permissions1 AccessPermissionV1
			permissions1.Resources = nil
			for _, resourcesItem := range permissionsItem.Resources {
				var resources1 PermissionResourceV1
				resources1.ID = types.StringValue(resourcesItem.ID)
				resources1.Labels = nil
				for _, labelsItem := range resourcesItem.Labels {
					var labels1 LabelV1
					if labelsItem.Description != nil {
						labels1.Description = types.StringValue(*labelsItem.Description)
					} else {
						labels1.Description = types.StringNull()
					}
					labels1.Key = types.StringValue(labelsItem.Key)
					labels1.Value = types.StringValue(labelsItem.Value)
					resources1.Labels = append(resources1.Labels, labels1)
				}
				resources1.Type = types.StringValue(string(resourcesItem.Type))
				permissions1.Resources = append(permissions1.Resources, resources1)
			}
			permissions1.RoleID = types.StringValue(permissionsItem.RoleID)
			permissions1.RoleName = types.StringValue(permissionsItem.RoleName)
			r.Data.Permissions = append(r.Data.Permissions, permissions1)
		}
	}
}
