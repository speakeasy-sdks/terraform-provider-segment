// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"encoding/json"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"math/big"
	"segment/internal/sdk/pkg/models/shared"
)

func (r *CreateFunctionV1InputResourceModel) ToCreateSDKType() *shared.CreateFunctionV1Input {
	code := r.Code.ValueString()
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	displayName := r.DisplayName.ValueString()
	logoURL := new(string)
	if !r.LogoURL.IsUnknown() && !r.LogoURL.IsNull() {
		*logoURL = r.LogoURL.ValueString()
	} else {
		logoURL = nil
	}
	resourceType := shared.CreateFunctionV1InputResourceType(r.ResourceType.ValueString())
	var settings []shared.FunctionSettingV1 = nil
	for _, settingsItem := range r.Settings {
		description1 := settingsItem.Description.ValueString()
		label := settingsItem.Label.ValueString()
		name := settingsItem.Name.ValueString()
		required := settingsItem.Required.ValueBool()
		sensitive := settingsItem.Sensitive.ValueBool()
		typeVar := shared.FunctionSettingV1Type(settingsItem.Type.ValueString())
		settings = append(settings, shared.FunctionSettingV1{
			Description: description1,
			Label:       label,
			Name:        name,
			Required:    required,
			Sensitive:   sensitive,
			Type:        typeVar,
		})
	}
	out := shared.CreateFunctionV1Input{
		Code:         code,
		Description:  description,
		DisplayName:  displayName,
		LogoURL:      logoURL,
		ResourceType: resourceType,
		Settings:     settings,
	}
	return &out
}

func (r *CreateFunctionV1InputResourceModel) RefreshFromCreateResponse(resp *shared.RequestErrorEnvelope) {
	r.Errors = nil
	for _, errorsItem := range resp.Errors {
		var errors1 RequestError
		if errorsItem.Data == nil {
			errors1.Data = types.StringNull()
		} else {
			dataResult, _ := json.Marshal(errorsItem.Data)
			errors1.Data = types.StringValue(string(dataResult))
		}
		if errorsItem.Field != nil {
			errors1.Field = types.StringValue(*errorsItem.Field)
		} else {
			errors1.Field = types.StringNull()
		}
		if errorsItem.Message != nil {
			errors1.Message = types.StringValue(*errorsItem.Message)
		} else {
			errors1.Message = types.StringNull()
		}
		if errorsItem.Status != nil {
			errors1.Status = types.NumberValue(big.NewFloat(float64(*errorsItem.Status)))
		} else {
			errors1.Status = types.NumberNull()
		}
		errors1.Type = types.StringValue(errorsItem.Type)
		r.Errors = append(r.Errors, errors1)
	}
}
