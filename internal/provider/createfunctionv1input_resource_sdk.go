// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"github.com/hashicorp/terraform-plugin-framework/types"
	"math/big"
	"segment/internal/sdk/pkg/models/operations"
	"segment/internal/sdk/pkg/models/shared"
)

func (r *CreateFunctionV1InputResourceModel) ToCreateSDKType() *shared.CreateFunctionV1Input {
	code := r.Code.ValueString()
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	displayName := r.DisplayName.ValueString()
	logoURL := new(string)
	if !r.LogoURL.IsUnknown() && !r.LogoURL.IsNull() {
		*logoURL = r.LogoURL.ValueString()
	} else {
		logoURL = nil
	}
	resourceType := shared.ResourceType(r.ResourceType.ValueString())
	var settings []shared.FunctionSettingV1 = nil
	for _, settingsItem := range r.Settings {
		description1 := settingsItem.Description.ValueString()
		label := settingsItem.Label.ValueString()
		name := settingsItem.Name.ValueString()
		required := settingsItem.Required.ValueBool()
		sensitive := settingsItem.Sensitive.ValueBool()
		typeVar := shared.FunctionSettingV1Type(settingsItem.Type.ValueString())
		settings = append(settings, shared.FunctionSettingV1{
			Description: description1,
			Label:       label,
			Name:        name,
			Required:    required,
			Sensitive:   sensitive,
			Type:        typeVar,
		})
	}
	out := shared.CreateFunctionV1Input{
		Code:         code,
		Description:  description,
		DisplayName:  displayName,
		LogoURL:      logoURL,
		ResourceType: resourceType,
		Settings:     settings,
	}
	return &out
}

func (r *CreateFunctionV1InputResourceModel) RefreshFromCreateResponse(resp *operations.CreateFunctionResponseBody) {
	if resp.Data == nil {
		r.Data = nil
	} else {
		r.Data = &CreateFunctionV1Output{}
		if resp.Data.Function.BatchMaxCount != nil {
			r.Data.Function.BatchMaxCount = types.NumberValue(big.NewFloat(float64(*resp.Data.Function.BatchMaxCount)))
		} else {
			r.Data.Function.BatchMaxCount = types.NumberNull()
		}
		if resp.Data.Function.CatalogID != nil {
			r.Data.Function.CatalogID = types.StringValue(*resp.Data.Function.CatalogID)
		} else {
			r.Data.Function.CatalogID = types.StringNull()
		}
		if resp.Data.Function.Code != nil {
			r.Data.Function.Code = types.StringValue(*resp.Data.Function.Code)
		} else {
			r.Data.Function.Code = types.StringNull()
		}
		if resp.Data.Function.CreatedAt != nil {
			r.Data.Function.CreatedAt = types.StringValue(*resp.Data.Function.CreatedAt)
		} else {
			r.Data.Function.CreatedAt = types.StringNull()
		}
		if resp.Data.Function.CreatedBy != nil {
			r.Data.Function.CreatedBy = types.StringValue(*resp.Data.Function.CreatedBy)
		} else {
			r.Data.Function.CreatedBy = types.StringNull()
		}
		if resp.Data.Function.DeployedAt != nil {
			r.Data.Function.DeployedAt = types.StringValue(*resp.Data.Function.DeployedAt)
		} else {
			r.Data.Function.DeployedAt = types.StringNull()
		}
		if resp.Data.Function.Description != nil {
			r.Data.Function.Description = types.StringValue(*resp.Data.Function.Description)
		} else {
			r.Data.Function.Description = types.StringNull()
		}
		if resp.Data.Function.DisplayName != nil {
			r.Data.Function.DisplayName = types.StringValue(*resp.Data.Function.DisplayName)
		} else {
			r.Data.Function.DisplayName = types.StringNull()
		}
		if resp.Data.Function.ID != nil {
			r.Data.Function.ID = types.StringValue(*resp.Data.Function.ID)
		} else {
			r.Data.Function.ID = types.StringNull()
		}
		if resp.Data.Function.IsLatestVersion != nil {
			r.Data.Function.IsLatestVersion = types.BoolValue(*resp.Data.Function.IsLatestVersion)
		} else {
			r.Data.Function.IsLatestVersion = types.BoolNull()
		}
		if resp.Data.Function.LogoURL != nil {
			r.Data.Function.LogoURL = types.StringValue(*resp.Data.Function.LogoURL)
		} else {
			r.Data.Function.LogoURL = types.StringNull()
		}
		if resp.Data.Function.PreviewWebhookURL != nil {
			r.Data.Function.PreviewWebhookURL = types.StringValue(*resp.Data.Function.PreviewWebhookURL)
		} else {
			r.Data.Function.PreviewWebhookURL = types.StringNull()
		}
		if resp.Data.Function.ResourceType != nil {
			r.Data.Function.ResourceType = types.StringValue(string(*resp.Data.Function.ResourceType))
		} else {
			r.Data.Function.ResourceType = types.StringNull()
		}
		r.Data.Function.Settings = nil
		for _, settingsItem := range resp.Data.Function.Settings {
			var settings1 FunctionSettingV1
			settings1.Description = types.StringValue(settingsItem.Description)
			settings1.Label = types.StringValue(settingsItem.Label)
			settings1.Name = types.StringValue(settingsItem.Name)
			settings1.Required = types.BoolValue(settingsItem.Required)
			settings1.Sensitive = types.BoolValue(settingsItem.Sensitive)
			settings1.Type = types.StringValue(string(settingsItem.Type))
			r.Data.Function.Settings = append(r.Data.Function.Settings, settings1)
		}
	}
}
