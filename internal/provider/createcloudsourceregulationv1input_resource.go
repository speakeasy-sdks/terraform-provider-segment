// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/listplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/scentregroup/terraform-provider-segment/internal/sdk"
	"github.com/scentregroup/terraform-provider-segment/internal/sdk/pkg/models/operations"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &CreateCloudSourceRegulationV1InputResource{}
var _ resource.ResourceWithImportState = &CreateCloudSourceRegulationV1InputResource{}

func NewCreateCloudSourceRegulationV1InputResource() resource.Resource {
	return &CreateCloudSourceRegulationV1InputResource{}
}

// CreateCloudSourceRegulationV1InputResource defines the resource implementation.
type CreateCloudSourceRegulationV1InputResource struct {
	client *sdk.Segment
}

// CreateCloudSourceRegulationV1InputResourceModel describes the resource data model.
type CreateCloudSourceRegulationV1InputResourceModel struct {
	Collection     types.String                         `tfsdk:"collection"`
	Data           *CreateCloudSourceRegulationV1Output `tfsdk:"data"`
	RegulationType types.String                         `tfsdk:"regulation_type"`
	SourceID       types.String                         `tfsdk:"source_id"`
	SubjectIds     []types.String                       `tfsdk:"subject_ids"`
	SubjectType    types.String                         `tfsdk:"subject_type"`
}

func (r *CreateCloudSourceRegulationV1InputResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_create_cloud_source_regulation_v1_input"
}

func (r *CreateCloudSourceRegulationV1InputResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "CreateCloudSourceRegulationV1Input Resource",

		Attributes: map[string]schema.Attribute{
			"collection": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
				},
				Required:    true,
				Description: `The Cloud Source collection to regulate. Requires replacement if changed. `,
			},
			"data": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"regulate_id": schema.StringAttribute{
						Computed:    true,
						Description: `The id of the created regulation.`,
					},
				},
				Description: `The output of a create Cloud Source regulation call.`,
			},
			"regulation_type": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
				},
				Required:    true,
				Description: `The regulation type to create. Requires replacement if changed. ; must be one of ["DELETE_INTERNAL", "DELETE_ONLY", "SUPPRESS_ONLY", "SUPPRESS_WITH_DELETE", "UNSUPPRESS"]`,
				Validators: []validator.String{
					stringvalidator.OneOf(
						"DELETE_INTERNAL",
						"DELETE_ONLY",
						"SUPPRESS_ONLY",
						"SUPPRESS_WITH_DELETE",
						"UNSUPPRESS",
					),
				},
			},
			"source_id": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
				},
				Required:    true,
				Description: `Requires replacement if changed. `,
			},
			"subject_ids": schema.ListAttribute{
				PlanModifiers: []planmodifier.List{
					listplanmodifier.RequiresReplaceIfConfigured(),
				},
				Required:    true,
				ElementType: types.StringType,
				MarkdownDescription: `The list of ` + "`" + `userId` + "`" + ` or ` + "`" + `objectId` + "`" + ` values of the subjects to regulate.` + "\n" +
					`` + "\n" +
					`Config API note: equal to ` + "`" + `parent` + "`" + ` but allows an array.` + "\n" +
					`Requires replacement if changed. `,
			},
			"subject_type": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
				},
				Required:    true,
				Description: `The subject type. Must be ` + "`" + `objectId` + "`" + ` for Cloud Sources. Requires replacement if changed. ; must be one of ["OBJECT_ID"]`,
				Validators: []validator.String{
					stringvalidator.OneOf(
						"OBJECT_ID",
					),
				},
			},
		},
	}
}

func (r *CreateCloudSourceRegulationV1InputResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.Segment)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *sdk.Segment, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *CreateCloudSourceRegulationV1InputResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *CreateCloudSourceRegulationV1InputResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(plan.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	createCloudSourceRegulationV1Input := *data.ToSharedCreateCloudSourceRegulationV1Input()
	sourceID := data.SourceID.ValueString()
	request := operations.CreateCloudSourceRegulationRequest{
		CreateCloudSourceRegulationV1Input: createCloudSourceRegulationV1Input,
		SourceID:                           sourceID,
	}
	res, err := r.client.DeletionAndSuppression.CreateCloudSourceRegulation(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if res.TwoHundredApplicationJSONObject == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromOperationsCreateCloudSourceRegulationResponseBody(res.TwoHundredApplicationJSONObject)
	refreshPlan(ctx, plan, &data, resp.Diagnostics)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *CreateCloudSourceRegulationV1InputResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *CreateCloudSourceRegulationV1InputResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Not Implemented; we rely entirely on CREATE API request response

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *CreateCloudSourceRegulationV1InputResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *CreateCloudSourceRegulationV1InputResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	merge(ctx, req, resp, &data)
	if resp.Diagnostics.HasError() {
		return
	}

	// Not Implemented; all attributes marked as RequiresReplace

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *CreateCloudSourceRegulationV1InputResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *CreateCloudSourceRegulationV1InputResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Not Implemented; entity does not have a configured DELETE operation
}

func (r *CreateCloudSourceRegulationV1InputResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resp.Diagnostics.AddError("Not Implemented", "No available import state operation is available for resource create_cloud_source_regulation_v1_input.")
}
