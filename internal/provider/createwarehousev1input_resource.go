// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework-validators/mapvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/boolplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/mapplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	speakeasy_boolplanmodifier "github.com/scentregroup/terraform-provider-segment/internal/planmodifiers/boolplanmodifier"
	speakeasy_listplanmodifier "github.com/scentregroup/terraform-provider-segment/internal/planmodifiers/listplanmodifier"
	speakeasy_mapplanmodifier "github.com/scentregroup/terraform-provider-segment/internal/planmodifiers/mapplanmodifier"
	speakeasy_objectplanmodifier "github.com/scentregroup/terraform-provider-segment/internal/planmodifiers/objectplanmodifier"
	speakeasy_stringplanmodifier "github.com/scentregroup/terraform-provider-segment/internal/planmodifiers/stringplanmodifier"
	"github.com/scentregroup/terraform-provider-segment/internal/sdk"
	"github.com/scentregroup/terraform-provider-segment/internal/validators"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &CreateWarehouseV1InputResource{}
var _ resource.ResourceWithImportState = &CreateWarehouseV1InputResource{}

func NewCreateWarehouseV1InputResource() resource.Resource {
	return &CreateWarehouseV1InputResource{}
}

// CreateWarehouseV1InputResource defines the resource implementation.
type CreateWarehouseV1InputResource struct {
	client *sdk.Segment
}

// CreateWarehouseV1InputResourceModel describes the resource data model.
type CreateWarehouseV1InputResourceModel struct {
	Data       *CreateWarehouseV1Output `tfsdk:"data"`
	Enabled    types.Bool               `tfsdk:"enabled"`
	MetadataID types.String             `tfsdk:"metadata_id"`
	Name       types.String             `tfsdk:"name"`
	Settings   map[string]types.String  `tfsdk:"settings"`
}

func (r *CreateWarehouseV1InputResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_create_warehouse_v1_input"
}

func (r *CreateWarehouseV1InputResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "CreateWarehouseV1Input Resource",

		Attributes: map[string]schema.Attribute{
			"data": schema.SingleNestedAttribute{
				Computed: true,
				PlanModifiers: []planmodifier.Object{
					speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.Standard),
				},
				Attributes: map[string]schema.Attribute{
					"warehouse": schema.SingleNestedAttribute{
						Computed: true,
						PlanModifiers: []planmodifier.Object{
							speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.Standard),
						},
						Attributes: map[string]schema.Attribute{
							"enabled": schema.BoolAttribute{
								Computed: true,
								PlanModifiers: []planmodifier.Bool{
									speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.Standard),
								},
								Description: `When set to true, this Warehouse receives data.`,
							},
							"id": schema.StringAttribute{
								Computed: true,
								PlanModifiers: []planmodifier.String{
									speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.Standard),
								},
								Description: `The id of the Warehouse.`,
							},
							"metadata": schema.SingleNestedAttribute{
								Computed: true,
								PlanModifiers: []planmodifier.Object{
									speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.Standard),
								},
								Attributes: map[string]schema.Attribute{
									"description": schema.StringAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.String{
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.Standard),
										},
										Description: `A description, in English, of this object.`,
									},
									"id": schema.StringAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.String{
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.Standard),
										},
										Description: `The id of this object.`,
									},
									"logos": schema.SingleNestedAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.Object{
											speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.Standard),
										},
										Attributes: map[string]schema.Attribute{
											"alt": schema.StringAttribute{
												Computed: true,
												PlanModifiers: []planmodifier.String{
													speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.Standard),
												},
												Description: `The alternative text for this logo.`,
											},
											"default": schema.StringAttribute{
												Computed: true,
												PlanModifiers: []planmodifier.String{
													speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.Standard),
												},
												Description: `The default URL for this logo.`,
											},
											"mark": schema.StringAttribute{
												Computed: true,
												PlanModifiers: []planmodifier.String{
													speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.Standard),
												},
												Description: `The logo mark.`,
											},
										},
										Description: `Logo information for this object.`,
									},
									"name": schema.StringAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.String{
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.Standard),
										},
										Description: `The name of this object.`,
									},
									"options": schema.ListNestedAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.List{
											speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.Standard),
										},
										NestedObject: schema.NestedAttributeObject{
											Attributes: map[string]schema.Attribute{
												"default_value": schema.StringAttribute{
													Computed: true,
													PlanModifiers: []planmodifier.String{
														speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.Standard),
													},
													MarkdownDescription: `Parsed as JSON.` + "\n" +
														`An optional default value for the field.`,
													Validators: []validator.String{
														validators.IsValidJSON(),
													},
												},
												"description": schema.StringAttribute{
													Computed: true,
													PlanModifiers: []planmodifier.String{
														speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.Standard),
													},
													Description: `An optional short text description of the field.`,
												},
												"label": schema.StringAttribute{
													Computed: true,
													PlanModifiers: []planmodifier.String{
														speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.Standard),
													},
													Description: `An optional label for this field.`,
												},
												"name": schema.StringAttribute{
													Computed: true,
													PlanModifiers: []planmodifier.String{
														speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.Standard),
													},
													Description: `The name identifying this option in the context of a Segment Integration.`,
												},
												"required": schema.BoolAttribute{
													Computed: true,
													PlanModifiers: []planmodifier.Bool{
														speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.Standard),
													},
													Description: `Whether this is a required option when setting up the Integration.`,
												},
												"type": schema.StringAttribute{
													Computed: true,
													PlanModifiers: []planmodifier.String{
														speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.Standard),
													},
													MarkdownDescription: `Defines the type for this option in the schema. Types are most commonly strings, but may also represent other` + "\n" +
														`primitive types, such as booleans, and numbers, as well as complex types, such as objects and arrays.`,
												},
											},
										},
										Description: `The Integration options for this object.`,
									},
									"slug": schema.StringAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.String{
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.Standard),
										},
										Description: `A human-readable, unique identifier for object.`,
									},
								},
								Description: `The metadata for the Warehouse.`,
							},
							"settings": schema.MapAttribute{
								Computed: true,
								PlanModifiers: []planmodifier.Map{
									speakeasy_mapplanmodifier.SuppressDiff(speakeasy_mapplanmodifier.Standard),
								},
								ElementType: types.StringType,
								MarkdownDescription: `The settings associated with this Warehouse.` + "\n" +
									`` + "\n" +
									`Common settings are connection-related configuration used to connect to it, for example host, username, and port.`,
								Validators: []validator.Map{
									mapvalidator.ValueStringsAre(validators.IsValidJSON()),
								},
							},
							"workspace_id": schema.StringAttribute{
								Computed: true,
								PlanModifiers: []planmodifier.String{
									speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.Standard),
								},
								Description: `The id of the Workspace that owns this Warehouse.`,
							},
						},
						Description: `The newly created Warehouse.`,
					},
				},
				Description: `Returns the newly created Warehouse.`,
			},
			"enabled": schema.BoolAttribute{
				PlanModifiers: []planmodifier.Bool{
					boolplanmodifier.RequiresReplaceIfConfigured(),
				},
				Optional:    true,
				Description: `Enable to allow this Warehouse to receive data. Defaults to true.`,
			},
			"metadata_id": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
				},
				Required:    true,
				Description: `The Warehouse metadata to use.`,
			},
			"name": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
				},
				Optional:    true,
				Description: `An optional human-readable name for this Warehouse.`,
			},
			"settings": schema.MapAttribute{
				PlanModifiers: []planmodifier.Map{
					mapplanmodifier.RequiresReplaceIfConfigured(),
				},
				Required:    true,
				ElementType: types.StringType,
				MarkdownDescription: `A key-value object that contains instance-specific settings for a Warehouse.` + "\n" +
					`` + "\n" +
					`Different kinds of Warehouses require different settings. The required and optional settings` + "\n" +
					`for a Warehouse are described in the ` + "`" + `options` + "`" + ` object of the associated Warehouse metadata.` + "\n" +
					`` + "\n" +
					`You can find the full list of Warehouse metadata and related settings information in the` + "\n" +
					`` + "`" + `/catalog/warehouses` + "`" + ` endpoint.`,
				Validators: []validator.Map{
					mapvalidator.ValueStringsAre(validators.IsValidJSON()),
				},
			},
		},
	}
}

func (r *CreateWarehouseV1InputResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.Segment)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *sdk.Segment, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *CreateWarehouseV1InputResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *CreateWarehouseV1InputResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(plan.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request := *data.ToSharedCreateWarehouseV1Input()
	res, err := r.client.Warehouses.CreateWarehouse(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if res.TwoHundredApplicationJSONObject == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromOperationsCreateWarehouseResponseBody(res.TwoHundredApplicationJSONObject)
	refreshPlan(ctx, plan, &data, resp.Diagnostics)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *CreateWarehouseV1InputResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *CreateWarehouseV1InputResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Not Implemented; we rely entirely on CREATE API request response

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *CreateWarehouseV1InputResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *CreateWarehouseV1InputResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	merge(ctx, req, resp, &data)
	if resp.Diagnostics.HasError() {
		return
	}

	// Not Implemented; all attributes marked as RequiresReplace

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *CreateWarehouseV1InputResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *CreateWarehouseV1InputResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Not Implemented; entity does not have a configured DELETE operation
}

func (r *CreateWarehouseV1InputResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resp.Diagnostics.AddError("Not Implemented", "No available import state operation is available for resource create_warehouse_v1_input.")
}
