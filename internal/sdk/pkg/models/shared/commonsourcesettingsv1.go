// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// CommonSourceSettingsV1GroupSourceSettingsV1CommonEventOnViolations - The common group event on violations.
//
// Config API note: equal to `commonGroupEventOnViolations`.
type CommonSourceSettingsV1GroupSourceSettingsV1CommonEventOnViolations string

const (
	CommonSourceSettingsV1GroupSourceSettingsV1CommonEventOnViolationsAllow      CommonSourceSettingsV1GroupSourceSettingsV1CommonEventOnViolations = "ALLOW"
	CommonSourceSettingsV1GroupSourceSettingsV1CommonEventOnViolationsBlock      CommonSourceSettingsV1GroupSourceSettingsV1CommonEventOnViolations = "BLOCK"
	CommonSourceSettingsV1GroupSourceSettingsV1CommonEventOnViolationsOmitTraits CommonSourceSettingsV1GroupSourceSettingsV1CommonEventOnViolations = "OMIT_TRAITS"
)

func (e CommonSourceSettingsV1GroupSourceSettingsV1CommonEventOnViolations) ToPointer() *CommonSourceSettingsV1GroupSourceSettingsV1CommonEventOnViolations {
	return &e
}

func (e *CommonSourceSettingsV1GroupSourceSettingsV1CommonEventOnViolations) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ALLOW":
		fallthrough
	case "BLOCK":
		fallthrough
	case "OMIT_TRAITS":
		*e = CommonSourceSettingsV1GroupSourceSettingsV1CommonEventOnViolations(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CommonSourceSettingsV1GroupSourceSettingsV1CommonEventOnViolations: %v", v)
	}
}

// CommonSourceSettingsV1GroupSourceSettingsV1 - Group settings.
type CommonSourceSettingsV1GroupSourceSettingsV1 struct {
	// Enable to allow group traits on violations.
	//
	// Config API note: equal to `allowGroupTraitsOnViolations`.
	AllowTraitsOnViolations *bool `json:"allowTraitsOnViolations,omitempty"`
	// Enable to allow unplanned group traits.
	//
	// Config API note: equal to `allowUnplannedGroupTraits`.
	AllowUnplannedTraits *bool `json:"allowUnplannedTraits,omitempty"`
	// The common group event on violations.
	//
	// Config API note: equal to `commonGroupEventOnViolations`.
	CommonEventOnViolations *CommonSourceSettingsV1GroupSourceSettingsV1CommonEventOnViolations `json:"commonEventOnViolations,omitempty"`
}

// CommonSourceSettingsV1IdentifySourceSettingsV1CommonEventOnViolations - The common identify event on violations.
//
// Config API note: equal to `commonIdentifyEventOnViolations`.
type CommonSourceSettingsV1IdentifySourceSettingsV1CommonEventOnViolations string

const (
	CommonSourceSettingsV1IdentifySourceSettingsV1CommonEventOnViolationsAllow      CommonSourceSettingsV1IdentifySourceSettingsV1CommonEventOnViolations = "ALLOW"
	CommonSourceSettingsV1IdentifySourceSettingsV1CommonEventOnViolationsBlock      CommonSourceSettingsV1IdentifySourceSettingsV1CommonEventOnViolations = "BLOCK"
	CommonSourceSettingsV1IdentifySourceSettingsV1CommonEventOnViolationsOmitTraits CommonSourceSettingsV1IdentifySourceSettingsV1CommonEventOnViolations = "OMIT_TRAITS"
)

func (e CommonSourceSettingsV1IdentifySourceSettingsV1CommonEventOnViolations) ToPointer() *CommonSourceSettingsV1IdentifySourceSettingsV1CommonEventOnViolations {
	return &e
}

func (e *CommonSourceSettingsV1IdentifySourceSettingsV1CommonEventOnViolations) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ALLOW":
		fallthrough
	case "BLOCK":
		fallthrough
	case "OMIT_TRAITS":
		*e = CommonSourceSettingsV1IdentifySourceSettingsV1CommonEventOnViolations(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CommonSourceSettingsV1IdentifySourceSettingsV1CommonEventOnViolations: %v", v)
	}
}

// CommonSourceSettingsV1IdentifySourceSettingsV1 - Identify settings.
type CommonSourceSettingsV1IdentifySourceSettingsV1 struct {
	// Enable to allow identify traits on violations.
	//
	// Config API note: equal to `allowIdentifyTraitsOnViolations`.
	AllowTraitsOnViolations *bool `json:"allowTraitsOnViolations,omitempty"`
	// Enable to allow unplanned identify traits.
	//
	// Config API note: equal to `allowUnplannedIdentifyTraits`.
	AllowUnplannedTraits *bool `json:"allowUnplannedTraits,omitempty"`
	// The common identify event on violations.
	//
	// Config API note: equal to `commonIdentifyEventOnViolations`.
	CommonEventOnViolations *CommonSourceSettingsV1IdentifySourceSettingsV1CommonEventOnViolations `json:"commonEventOnViolations,omitempty"`
}

// CommonSourceSettingsV1TrackSourceSettingsV1CommonEventOnViolations - The common track event on violations.
//
// Config API note: equal to `commonTrackEventOnViolations`.
type CommonSourceSettingsV1TrackSourceSettingsV1CommonEventOnViolations string

const (
	CommonSourceSettingsV1TrackSourceSettingsV1CommonEventOnViolationsAllow          CommonSourceSettingsV1TrackSourceSettingsV1CommonEventOnViolations = "ALLOW"
	CommonSourceSettingsV1TrackSourceSettingsV1CommonEventOnViolationsBlock          CommonSourceSettingsV1TrackSourceSettingsV1CommonEventOnViolations = "BLOCK"
	CommonSourceSettingsV1TrackSourceSettingsV1CommonEventOnViolationsOmitProperties CommonSourceSettingsV1TrackSourceSettingsV1CommonEventOnViolations = "OMIT_PROPERTIES"
)

func (e CommonSourceSettingsV1TrackSourceSettingsV1CommonEventOnViolations) ToPointer() *CommonSourceSettingsV1TrackSourceSettingsV1CommonEventOnViolations {
	return &e
}

func (e *CommonSourceSettingsV1TrackSourceSettingsV1CommonEventOnViolations) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ALLOW":
		fallthrough
	case "BLOCK":
		fallthrough
	case "OMIT_PROPERTIES":
		*e = CommonSourceSettingsV1TrackSourceSettingsV1CommonEventOnViolations(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CommonSourceSettingsV1TrackSourceSettingsV1CommonEventOnViolations: %v", v)
	}
}

// CommonSourceSettingsV1TrackSourceSettingsV1 - Track settings.
type CommonSourceSettingsV1TrackSourceSettingsV1 struct {
	// Allow track event on violations.
	//
	// Config API note: equal to `allowTrackEventOnViolations`.
	AllowEventOnViolations *bool `json:"allowEventOnViolations,omitempty"`
	// Enable to allow track properties on violations.
	//
	// Config API note: equal to `allowTrackEventPropertiesOnViolations`.
	AllowPropertiesOnViolations *bool `json:"allowPropertiesOnViolations,omitempty"`
	// Enable to allow unplanned track event properties.
	//
	// Config API note: equal to `allowUnplannedTrackEventProperties`.
	AllowUnplannedEventProperties *bool `json:"allowUnplannedEventProperties,omitempty"`
	// Enable to allow unplanned track events.
	//
	// Config API note: equal to `allowUnplannedTrackEvents`.
	AllowUnplannedEvents *bool `json:"allowUnplannedEvents,omitempty"`
	// The common track event on violations.
	//
	// Config API note: equal to `commonTrackEventOnViolations`.
	CommonEventOnViolations *CommonSourceSettingsV1TrackSourceSettingsV1CommonEventOnViolations `json:"commonEventOnViolations,omitempty"`
}

type CommonSourceSettingsV1 struct {
	// SourceId to forward blocked events to.
	ForwardingBlockedEventsTo *string `json:"forwardingBlockedEventsTo,omitempty"`
	// SourceId to forward violations to.
	ForwardingViolationsTo *string `json:"forwardingViolationsTo,omitempty"`
	// Group settings.
	Group *CommonSourceSettingsV1GroupSourceSettingsV1 `json:"group,omitempty"`
	// Identify settings.
	Identify *CommonSourceSettingsV1IdentifySourceSettingsV1 `json:"identify,omitempty"`
	// Track settings.
	Track *CommonSourceSettingsV1TrackSourceSettingsV1 `json:"track,omitempty"`
}
