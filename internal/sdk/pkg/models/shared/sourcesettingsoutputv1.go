// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// SourceSettingsOutputV1GroupSourceSettingsV1CommonEventOnViolations - The common group event on violations.
//
// Config API note: equal to `commonGroupEventOnViolations`.
type SourceSettingsOutputV1GroupSourceSettingsV1CommonEventOnViolations string

const (
	SourceSettingsOutputV1GroupSourceSettingsV1CommonEventOnViolationsAllow      SourceSettingsOutputV1GroupSourceSettingsV1CommonEventOnViolations = "ALLOW"
	SourceSettingsOutputV1GroupSourceSettingsV1CommonEventOnViolationsBlock      SourceSettingsOutputV1GroupSourceSettingsV1CommonEventOnViolations = "BLOCK"
	SourceSettingsOutputV1GroupSourceSettingsV1CommonEventOnViolationsOmitTraits SourceSettingsOutputV1GroupSourceSettingsV1CommonEventOnViolations = "OMIT_TRAITS"
)

func (e SourceSettingsOutputV1GroupSourceSettingsV1CommonEventOnViolations) ToPointer() *SourceSettingsOutputV1GroupSourceSettingsV1CommonEventOnViolations {
	return &e
}

func (e *SourceSettingsOutputV1GroupSourceSettingsV1CommonEventOnViolations) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ALLOW":
		fallthrough
	case "BLOCK":
		fallthrough
	case "OMIT_TRAITS":
		*e = SourceSettingsOutputV1GroupSourceSettingsV1CommonEventOnViolations(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceSettingsOutputV1GroupSourceSettingsV1CommonEventOnViolations: %v", v)
	}
}

// SourceSettingsOutputV1GroupSourceSettingsV1 - Group settings.
type SourceSettingsOutputV1GroupSourceSettingsV1 struct {
	// Enable to allow group traits on violations.
	//
	// Config API note: equal to `allowGroupTraitsOnViolations`.
	AllowTraitsOnViolations *bool `json:"allowTraitsOnViolations,omitempty"`
	// Enable to allow unplanned group traits.
	//
	// Config API note: equal to `allowUnplannedGroupTraits`.
	AllowUnplannedTraits *bool `json:"allowUnplannedTraits,omitempty"`
	// The common group event on violations.
	//
	// Config API note: equal to `commonGroupEventOnViolations`.
	CommonEventOnViolations *SourceSettingsOutputV1GroupSourceSettingsV1CommonEventOnViolations `json:"commonEventOnViolations,omitempty"`
}

func (o *SourceSettingsOutputV1GroupSourceSettingsV1) GetAllowTraitsOnViolations() *bool {
	if o == nil {
		return nil
	}
	return o.AllowTraitsOnViolations
}

func (o *SourceSettingsOutputV1GroupSourceSettingsV1) GetAllowUnplannedTraits() *bool {
	if o == nil {
		return nil
	}
	return o.AllowUnplannedTraits
}

func (o *SourceSettingsOutputV1GroupSourceSettingsV1) GetCommonEventOnViolations() *SourceSettingsOutputV1GroupSourceSettingsV1CommonEventOnViolations {
	if o == nil {
		return nil
	}
	return o.CommonEventOnViolations
}

// SourceSettingsOutputV1IdentifySourceSettingsV1CommonEventOnViolations - The common identify event on violations.
//
// Config API note: equal to `commonIdentifyEventOnViolations`.
type SourceSettingsOutputV1IdentifySourceSettingsV1CommonEventOnViolations string

const (
	SourceSettingsOutputV1IdentifySourceSettingsV1CommonEventOnViolationsAllow      SourceSettingsOutputV1IdentifySourceSettingsV1CommonEventOnViolations = "ALLOW"
	SourceSettingsOutputV1IdentifySourceSettingsV1CommonEventOnViolationsBlock      SourceSettingsOutputV1IdentifySourceSettingsV1CommonEventOnViolations = "BLOCK"
	SourceSettingsOutputV1IdentifySourceSettingsV1CommonEventOnViolationsOmitTraits SourceSettingsOutputV1IdentifySourceSettingsV1CommonEventOnViolations = "OMIT_TRAITS"
)

func (e SourceSettingsOutputV1IdentifySourceSettingsV1CommonEventOnViolations) ToPointer() *SourceSettingsOutputV1IdentifySourceSettingsV1CommonEventOnViolations {
	return &e
}

func (e *SourceSettingsOutputV1IdentifySourceSettingsV1CommonEventOnViolations) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ALLOW":
		fallthrough
	case "BLOCK":
		fallthrough
	case "OMIT_TRAITS":
		*e = SourceSettingsOutputV1IdentifySourceSettingsV1CommonEventOnViolations(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceSettingsOutputV1IdentifySourceSettingsV1CommonEventOnViolations: %v", v)
	}
}

// SourceSettingsOutputV1IdentifySourceSettingsV1 - Identify settings.
type SourceSettingsOutputV1IdentifySourceSettingsV1 struct {
	// Enable to allow identify traits on violations.
	//
	// Config API note: equal to `allowIdentifyTraitsOnViolations`.
	AllowTraitsOnViolations *bool `json:"allowTraitsOnViolations,omitempty"`
	// Enable to allow unplanned identify traits.
	//
	// Config API note: equal to `allowUnplannedIdentifyTraits`.
	AllowUnplannedTraits *bool `json:"allowUnplannedTraits,omitempty"`
	// The common identify event on violations.
	//
	// Config API note: equal to `commonIdentifyEventOnViolations`.
	CommonEventOnViolations *SourceSettingsOutputV1IdentifySourceSettingsV1CommonEventOnViolations `json:"commonEventOnViolations,omitempty"`
}

func (o *SourceSettingsOutputV1IdentifySourceSettingsV1) GetAllowTraitsOnViolations() *bool {
	if o == nil {
		return nil
	}
	return o.AllowTraitsOnViolations
}

func (o *SourceSettingsOutputV1IdentifySourceSettingsV1) GetAllowUnplannedTraits() *bool {
	if o == nil {
		return nil
	}
	return o.AllowUnplannedTraits
}

func (o *SourceSettingsOutputV1IdentifySourceSettingsV1) GetCommonEventOnViolations() *SourceSettingsOutputV1IdentifySourceSettingsV1CommonEventOnViolations {
	if o == nil {
		return nil
	}
	return o.CommonEventOnViolations
}

// SourceSettingsOutputV1TrackSourceSettingsV1CommonEventOnViolations - The common track event on violations.
//
// Config API note: equal to `commonTrackEventOnViolations`.
type SourceSettingsOutputV1TrackSourceSettingsV1CommonEventOnViolations string

const (
	SourceSettingsOutputV1TrackSourceSettingsV1CommonEventOnViolationsAllow          SourceSettingsOutputV1TrackSourceSettingsV1CommonEventOnViolations = "ALLOW"
	SourceSettingsOutputV1TrackSourceSettingsV1CommonEventOnViolationsBlock          SourceSettingsOutputV1TrackSourceSettingsV1CommonEventOnViolations = "BLOCK"
	SourceSettingsOutputV1TrackSourceSettingsV1CommonEventOnViolationsOmitProperties SourceSettingsOutputV1TrackSourceSettingsV1CommonEventOnViolations = "OMIT_PROPERTIES"
)

func (e SourceSettingsOutputV1TrackSourceSettingsV1CommonEventOnViolations) ToPointer() *SourceSettingsOutputV1TrackSourceSettingsV1CommonEventOnViolations {
	return &e
}

func (e *SourceSettingsOutputV1TrackSourceSettingsV1CommonEventOnViolations) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ALLOW":
		fallthrough
	case "BLOCK":
		fallthrough
	case "OMIT_PROPERTIES":
		*e = SourceSettingsOutputV1TrackSourceSettingsV1CommonEventOnViolations(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceSettingsOutputV1TrackSourceSettingsV1CommonEventOnViolations: %v", v)
	}
}

// SourceSettingsOutputV1TrackSourceSettingsV1 - Track settings.
type SourceSettingsOutputV1TrackSourceSettingsV1 struct {
	// Allow track event on violations.
	//
	// Config API note: equal to `allowTrackEventOnViolations`.
	AllowEventOnViolations *bool `json:"allowEventOnViolations,omitempty"`
	// Enable to allow track properties on violations.
	//
	// Config API note: equal to `allowTrackEventPropertiesOnViolations`.
	AllowPropertiesOnViolations *bool `json:"allowPropertiesOnViolations,omitempty"`
	// Enable to allow unplanned track event properties.
	//
	// Config API note: equal to `allowUnplannedTrackEventProperties`.
	AllowUnplannedEventProperties *bool `json:"allowUnplannedEventProperties,omitempty"`
	// Enable to allow unplanned track events.
	//
	// Config API note: equal to `allowUnplannedTrackEvents`.
	AllowUnplannedEvents *bool `json:"allowUnplannedEvents,omitempty"`
	// The common track event on violations.
	//
	// Config API note: equal to `commonTrackEventOnViolations`.
	CommonEventOnViolations *SourceSettingsOutputV1TrackSourceSettingsV1CommonEventOnViolations `json:"commonEventOnViolations,omitempty"`
}

func (o *SourceSettingsOutputV1TrackSourceSettingsV1) GetAllowEventOnViolations() *bool {
	if o == nil {
		return nil
	}
	return o.AllowEventOnViolations
}

func (o *SourceSettingsOutputV1TrackSourceSettingsV1) GetAllowPropertiesOnViolations() *bool {
	if o == nil {
		return nil
	}
	return o.AllowPropertiesOnViolations
}

func (o *SourceSettingsOutputV1TrackSourceSettingsV1) GetAllowUnplannedEventProperties() *bool {
	if o == nil {
		return nil
	}
	return o.AllowUnplannedEventProperties
}

func (o *SourceSettingsOutputV1TrackSourceSettingsV1) GetAllowUnplannedEvents() *bool {
	if o == nil {
		return nil
	}
	return o.AllowUnplannedEvents
}

func (o *SourceSettingsOutputV1TrackSourceSettingsV1) GetCommonEventOnViolations() *SourceSettingsOutputV1TrackSourceSettingsV1CommonEventOnViolations {
	if o == nil {
		return nil
	}
	return o.CommonEventOnViolations
}

// SourceSettingsOutputV1 - The output of Source settings.
type SourceSettingsOutputV1 struct {
	// SourceId to forward blocked events to.
	ForwardingBlockedEventsTo *string `json:"forwardingBlockedEventsTo,omitempty"`
	// SourceId to forward violations to.
	ForwardingViolationsTo *string `json:"forwardingViolationsTo,omitempty"`
	// Group settings.
	Group *SourceSettingsOutputV1GroupSourceSettingsV1 `json:"group,omitempty"`
	// Identify settings.
	Identify *SourceSettingsOutputV1IdentifySourceSettingsV1 `json:"identify,omitempty"`
	// Track settings.
	Track *SourceSettingsOutputV1TrackSourceSettingsV1 `json:"track,omitempty"`
}

func (o *SourceSettingsOutputV1) GetForwardingBlockedEventsTo() *string {
	if o == nil {
		return nil
	}
	return o.ForwardingBlockedEventsTo
}

func (o *SourceSettingsOutputV1) GetForwardingViolationsTo() *string {
	if o == nil {
		return nil
	}
	return o.ForwardingViolationsTo
}

func (o *SourceSettingsOutputV1) GetGroup() *SourceSettingsOutputV1GroupSourceSettingsV1 {
	if o == nil {
		return nil
	}
	return o.Group
}

func (o *SourceSettingsOutputV1) GetIdentify() *SourceSettingsOutputV1IdentifySourceSettingsV1 {
	if o == nil {
		return nil
	}
	return o.Identify
}

func (o *SourceSettingsOutputV1) GetTrack() *SourceSettingsOutputV1TrackSourceSettingsV1 {
	if o == nil {
		return nil
	}
	return o.Track
}
