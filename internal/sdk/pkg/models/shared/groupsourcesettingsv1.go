// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// GroupSourceSettingsV1CommonEventOnViolations - The common group event on violations.
//
// Config API note: equal to `commonGroupEventOnViolations`.
type GroupSourceSettingsV1CommonEventOnViolations string

const (
	GroupSourceSettingsV1CommonEventOnViolationsAllow      GroupSourceSettingsV1CommonEventOnViolations = "ALLOW"
	GroupSourceSettingsV1CommonEventOnViolationsBlock      GroupSourceSettingsV1CommonEventOnViolations = "BLOCK"
	GroupSourceSettingsV1CommonEventOnViolationsOmitTraits GroupSourceSettingsV1CommonEventOnViolations = "OMIT_TRAITS"
)

func (e GroupSourceSettingsV1CommonEventOnViolations) ToPointer() *GroupSourceSettingsV1CommonEventOnViolations {
	return &e
}

func (e *GroupSourceSettingsV1CommonEventOnViolations) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ALLOW":
		fallthrough
	case "BLOCK":
		fallthrough
	case "OMIT_TRAITS":
		*e = GroupSourceSettingsV1CommonEventOnViolations(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GroupSourceSettingsV1CommonEventOnViolations: %v", v)
	}
}

type GroupSourceSettingsV1 struct {
	// Enable to allow group traits on violations.
	//
	// Config API note: equal to `allowGroupTraitsOnViolations`.
	AllowTraitsOnViolations *bool `json:"allowTraitsOnViolations,omitempty"`
	// Enable to allow unplanned group traits.
	//
	// Config API note: equal to `allowUnplannedGroupTraits`.
	AllowUnplannedTraits *bool `json:"allowUnplannedTraits,omitempty"`
	// The common group event on violations.
	//
	// Config API note: equal to `commonGroupEventOnViolations`.
	CommonEventOnViolations *GroupSourceSettingsV1CommonEventOnViolations `json:"commonEventOnViolations,omitempty"`
}
